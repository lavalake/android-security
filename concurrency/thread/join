join方法本身是通过wait方法来实现等待的
原来在线程结束时，java虚拟机会执行该线程的本地exit方法，

//线程退出函数：
void JavaThread::exit(bool destroy_vm, ExitType exit_type) ｛
...
//这里会处理join相关的销毁逻辑
ensure_join(this);
...
｝

lock.notify_all(thread);

join()方法本质上是通过wait()方法实现阻塞的
如果子线程没有启动或者子线程执行结束，主线程不用等待可以继续执行

当main线程调用t.join时候，main线程会获得线程对象t的锁（wait 意味着拿到该对象的锁),调用该对象的wait(等待时间)，直到该对象唤醒main线程 ，
比如退出后。这就意味着main 线程调用t.join时，必须能够拿到线程t对象的锁
