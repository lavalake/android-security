HandlerThread is a thread with a message queue that incorporates a Thread , a Looper ,
and a MessageQueue
There is only one queue to store messages, so execution is guaranteed to be sequential
—and therefore thread safe—but with potentially low throughput, because tasks can be
delayed in the queue
The platform solves the race condition problem by
making handlerThread.getLooper() a blocking call until the HandlerThread is ready
to receive messages
The HandlerThread sets up the Looper internally and prepares the thread for receiving
messages. The internal setup gurantees that there is no race condition between creating
the Looper and sending messages, which can occur in the manual setup
/**
70     * This method returns the Looper associated with this thread. If this thread not been started
71     * or for any reason isAlive() returns false, this method will return null. If this thread
72     * has been started, this method will block until the looper has been initialized.
73     * @return The looper.
74     */
public Looper getLooper() {
76        if (!isAlive()) {
77            return null;
78        }
79
80        // If the thread has been started, wait until the looper has been created.
81        synchronized (this) {
82            while (isAlive() && mLooper == null) {
83                try {
84                    wait();
85                } catch (InterruptedException e) {
86                }
87            }
88        }
89        return mLooper;
90    }

*onLooperPrepared*
If additional setup is required on the HandlerThread before it starts to process messages,
the application should override HandlerThread.onLooperPrepared() , which is in‐
voked on the background thread when the Looper is prepared. The application can
define any initialization code in onLooperPrepared , such as creating a Handler that will
be associated with the HandlerThread
Sample Code
public LightsService(Context context) {
543        super(context);
544        mContext = context; //@pms_fw
545
546        //[@pms_fw svc LED
547        mInitCompleteForSvcLED = false;
548        mSvcLEDThread= new HandlerThread("mSvcLEDThread") {
549            @Override
550            protected void onLooperPrepared() {
551                mSvcLEDHandler = new SvcLEDHandler(mSvcLEDThread.getLooper());
552                synchronized (mSvcLEDThread) {
553                    mInitCompleteForSvcLED = true;
554                    mSvcLEDThread.notifyAll();
555
556                    Resources resources = mContext.getResources();
557                    mUsePatternLED = resources.getBoolean(
558                            com.android.internal.R.bool.config_using_patterned_svc_led);
559                    mUseSoftwareAutoBrightness = resources.getBoolean(
560                            com.android.internal.R.bool.config_automatic_brightness_available);
561                    if (mUseSoftwareAutoBrightness && fileExist(LED_LOW_POWER_PATH)) {
562                        mUseLEDAutoBrightness = true;
563                    }
564
565                    mDelayForcedSvcLEDTask = (mUseLEDAutoBrightness ? 700 : 0); //@pms_fw forced LED On
566
567                    Slog.d(TAG, TAG_LED + "SUPPORT_LED_INDICATOR : " + SUPPORT_LED_INDICATOR
568                            + "  mUseSoftwareAutoBrightness : " + mUseSoftwareAutoBrightness
569                            + "  mUseLEDAutoBrightness : " + mUseLEDAutoBrightness
570                            + "  mDelayForcedSvcLEDTask : " + mDelayForcedSvcLEDTask
571                            + "  mUsePatternLED " + mUsePatternLED);
572                }
573            }
574        };
575        mSvcLEDThread.start();
576        synchronized (mSvcLEDThread) {
577            while (!mInitCompleteForSvcLED) {
578                try {
579                    mSvcLEDThread.wait();
580                } catch (InterruptedException e) {
581                    // Ignore
582                }
583            }
584        }
585        //]
586
587        for (int i = 0; i < LightsManager.LIGHT_ID_COUNT; i++) {
588            mLights[i] = new LightImpl(i);
589        }
590
591        //[@pms_fw multiple_leds
592        clInitAllSavedData();
593        //]
594
595    }
