A memory leak is sometimes strictly defined as memory allocated by
the application that is not used anymore but never identified by the
GC as memory that can be reclaimed. Hence, the memory is occu‐
pied until the application process is terminated. A wider definition
would also include memory allocated for too long a time, essentially
hogging memory

As of Honeycomb, the GC executes concurrently on its own thread, not halting the
application threads

The Dalvik GC uses a very common two-step mechanism called mark and sweep

Any object that is accessible from outside the heap is considered to be a GC root. This
includes static objects, local objects on the stack, and threads
the Thread object itself becomes a GC root, and all objects it references are reachable
threads defined as inner classes keep references to the outer class, which will never be marked for garbage collection as
long as the thread is executing
Threads defined as local classes and anonymous inner classes have the same relations
to the outer class as inner classes, keeping the outer class reachable from a GC root
during execution.

Static inner classes
Static inner classes are members of the class instance of the enclosing object. Threads
defined in a static inner class therefore keep references to the class of the outer object,
but not to the outer object itself
If you create a new Runnable as an inner
class, it will hold a reference to the outer class during the execution, even if it is run by a static inner class

The lifecycle mismatch
A fundamental reason for leakage on Android is the lifecycle mismatch between components, objects, and threads
Leaking Activity objects is the most serious—and probably the most common—component leak
An Activity holds references, for instance, to the view hierarchy that may contain a lot of heap allocations

multiple Activity objects for the same Activity component can coexist on the heap

Worker threads may impose a memory leak in the application, because threads can
continue to execute in the background even after the component is destroyed

Automatically started threads pose a higher memory leakage risk than
user started threads, as configuration changes and user navigation can
yield many concurrent threads with Activity object references

*****************************************************
Thread Communication P116
Thread execution is a potential source for memory leaks, and so is the message passing
mechanism between threads
Most of these objects are referenced only
from the producer thread and therefore can be garbage collected when it exits, but
Handler is a candidate for memory leaks because it is referenced from the consumer
thread through a chain of objects
Thread->Looper->Message Queue->Message->Handler
While the consumer thread executes, all the direct or indirect referenced objects are still
reachable from a GC root and are ineligible for garbage collection. The Message in‐
stance, passed between the threads, holds references to a Handler and either to data
( Object ) or to a task ( Runnable ) (refer to Table 4-2). From the creation through the
recycling of a Message , it holds a Handler reference to the consumer thread. While the
message is pending in the message queue or executed on the thread, it is ineligible for
garbage collection. Furthermore, the Handler and the Object or Runnable , together
with all their implicit and explicit references, are still reachable from the GC root
******************************************************
