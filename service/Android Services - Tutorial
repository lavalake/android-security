http://www.vogella.com/tutorials/AndroidServices/article.html#servicecommunication
https://developer.android.com/reference/android/app/Service
A Service is an application component that can perform long-running operations in the background, 
and it doesn't provide a user interface.
1. service is not process nor thread. Service originally run in main thread.
2. A facility for application to tell the system about something it want to do in the background. Context.startService() will tell system to
   schedule work for the service.
3. A facility for an application to expose somne of its funtionality. This corresponds to calls to Context.bindService()
4. The Android system will attempt to keep the process hosting a service around as long as the service has been started or has
  clients bound to it. When running low on memory and needing to kill existing processes, the priority of a process hosting the
  service will be the higher of the following possibilities:
    If the service is currently executing code in its onCreate(), onStartCommand(), or onDestroy() methods, 
      then the hosting process will be a foreground process to ensure this code can execute without being killed.
    If the service has been started, then its hosting process is considered to be less important than any 
      processes that are currently visible to the user on-screen, but more important than any process not visible. 
      Because only a few processes are generally visible to the user, this means that the service should not be killed
      except in low memory conditions. However, since the user is not directly aware of a background service, in that state it is considered a valid candidate to kill, and you should be prepared for this to happen. In particular, long-running services will be increasingly likely to kill and are guaranteed to be killed (and restarted if appropriate) if they remain started long enough.
    If there are clients bound to the service, then the service's hosting process is never less important than the most
      important client. That is, if one of its clients is visible to the user, then the service itself is considered to 
      be visible. The way a client's importance impacts the service's importance can be adjusted through 
      Context.BIND_ABOVE_CLIENT, Context.BIND_ALLOW_OOM_MANAGEMENT, Context.BIND_WAIVE_PRIORITY, Context.BIND_IMPORTANT, 
      and Context.BIND_ADJUST_WITH_ACTIVITY.
