1. processState
    getContextObject -> IServiceManager
      getStrongProxyForHandle(0)
    every service has it's own process and will create one instance of processState. ProcessState will open the binder device and
    mmap memory into kernel.
2. IPCThreadState
3. android_util_binder.cpp
    This file define the JNI method to java class BinderInternal BinderProxy
    Converstion to/from Java IBinder Object and C++ IBinder instance.
  
4. android_os_BinderInternal_getContextObject
    processState->getContextObject
5. Intent and ContentProvider are higher-level abstraction of Binder
6. message handler
    a reference of messanger send to other process using IPC. Messages are delivered to local handler.
    Great for efficient call-back from the service to the client
    message are by default handled by the looper thread
    all underlying communication is still based on Binder
7. Looper
    Looper.prepare() is static method. It will generate ThreadLocal Looper object.
    
8. binder thread pool
    every app main thread will have a binder thread pool when the process created
9. ActivityThread
    handlerThread
    applicationThread
10. poolthread
    threadPools Executor
11. thread TLS
12. activity manager service
    ActivityThread.attach() will attach a ApplicationThread to AMS
    bindApplication
    scheduleCreateService
    scheduleServiceArgs
13. multi thread
    ThreadPoolExecutor
    IntentService
    AsyncTask
    thread priority
14. messageQueue
15. broadcastReceiver
16. activity stack
    process rank
       
17. task stack
18. service
    Started Service
    Bound Service
19 ContentProvider
    commonly used in collaboration with SQLite databases, which are always
    private to an application.
20. BroadcastReceiver
    statically registered in the AndroidManifest
    dynamiclly registered
21. Linux Process
    Thus, sandboxes are created to isolate users. In Android, every
    application package has a unique user ID
    System app share the same user ID
    uid
    pid
    ppid
22. application lifecycle
    application create, from zygote
    application termination
    Foreground
    background
    partial
    empty
23. activity lifecycle
24. thread lifecycle
    after activity destroyed, how about the thread runnig?
    nice value
24. zygot
25. dalvik internal thread
    GC/Signal Catcher/JDWP/FinilizerDaemon
26. thread scheduling
    Priority
        Linux CFS
    Control groups
        Foreground/Background
27. runOnUiThread
28. UI click event
    go through ActitityThread -> Looper -> handler
29. asynchronous RPC
    usually binder RPC is synchronous. Calling party will block. We can use a call back passed by client. 
    to implement asynchronous RPC. Refer KeyChain.alias
30 Messenger
    we can use handler to communicate with thread in same process
    for communication between threads in different process
