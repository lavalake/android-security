ZygoteInit.main()
  zygoteInit.runSelectLoopMode()
    receive new request and fork APP process
      RuntimeInit.invokeStaticMain()
        throw MethodAndArgsCaller exeption
          zygoteInit.main() capture the exeption and call run to invoke the ActivityThread.main()
          This will clear the call stack of the zygote process and make it looks like the entry point is ActivityThread.main()
          
          
          
Activity Creation
  ActivityThread.main()
    new ActivityThread
    thread.attach()
      new ApplicationThread
      ActivityManagerService.attachApplication(ApplicationThread)
        ActivityStack.realStackActivityLocked()
          app.thread.scheduleLaunchActivity() ->  this is the ApplicationThread method
          ActivityThread.handleLaunchActivity()
            performLuanchActivity()
              use classLoader to creat activity
              new Application
              new ContextImpl appContext
              appContext.init()
              appContext.setOuterContext(activity)
              activity.attach(appContext)
 
 1. new process folk Zygote process and inherite all the call stack. So ZygoteInit.main will capture the exception and clear the call
 stack. Then run from the main of the ActivityThread
    by doing this, we do not need call exec to run a new program. Because this will clear all the address space and lose all the library.
 
 2. MethodAndArgsCaller.run -> mMethod.invoke. here mMethod is the main of the ActivityThread
